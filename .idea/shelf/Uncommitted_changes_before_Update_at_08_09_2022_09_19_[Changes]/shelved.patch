Index: Foundation/FDB.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\n//if(file_exists('config.php')) require_once 'config.php';\r\n\r\nclass FDB{\r\n\r\n\t/** Oggetto PDO che permette la connessione al DBMS\r\n\t * \t@var PDO\r\n\t */\r\n\tprivate PDO $database;\r\n\r\n\t/**\tUnica instanza della classe\r\n\t * \t@var FDB\r\n\t */\r\n\tprivate static ?FDB $_instance = null;\r\n\r\n\t/**\r\n\t * \tIl costruttore è messo privato perché vogliamo un unico oggetto di questa classe\r\n\t */\r\n\tprivate function __construct ()\r\n\t{\r\n\t\ttry {\r\n\t\t\t//global $config;\r\n\t\t\t//$this->database = new PDO (\"mysql:dbname=\".$config['database'].\";host=localhost; charset=utf8;\", $config['username'], $config['password']);\r\n\t\t\t$db_host = \"localhost\";\r\n\t\t\t$db_name = \"faccebeve\";\r\n\t\t\t$this->database = new PDO(\"mysql:host=$db_host;dbname=$db_name\", \"root\", \"\");\r\n\t\t} catch (PDOException $e) {\r\n\t\t\techo \"Attenzione errore: \" . $e->getMessage();\r\n\t\t\tdie;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\tMetodo che instanzia un unico oggetto di questa classe richiamando il costruttore se non è stato già istanziato un oggetto\r\n\t * \t@return FDB\r\n\t */\r\n\tpublic static function getInstance(): FDB{\r\n\t\tif ( !(self::$_instance instanceof self) ) {\r\n\t\t\tself::$_instance = new FDB();\r\n\t\t}\r\n\t\treturn self::$_instance;\r\n\t}\r\n\r\n\t/**\r\n\t * Metodo che permette di salvare informazioni contenute in un oggetto Entity sul database.\r\n\t * @param string $class\r\n\t * @param object $obj\r\n\t * @return false|string|null\r\n\t */\r\n\tpublic function store(string $class,object $obj){\r\n\t\ttry {\r\n\t\t\t$this->database->beginTransaction();\r\n\t\t\t$query = \"INSERT INTO \" . $class::getTable() . \" VALUES \" . $class::getValues();\r\n\t\t\t$stmt = $this->database->prepare($query); //Prepared Statement\r\n\t\t\t$class::bind($stmt,$obj);\r\n\t\t\t$stmt->execute();\r\n\t\t\tif($class == \"FAdmin\" || $class == \"FProprietario\" || $class == \"FUtente\")\r\n\t\t\t\t$id = $obj->getUsername();\r\n\t\t\telseif($class == \"FCategoria\")\r\n\t\t\t\t$id = $obj->getCategoria();\r\n\t\t\telse{\r\n\t\t\t\t$id = $this->database->lastInsertId();\r\n\t\t\t}\r\n\t\t\t$this->database->commit();\r\n\t\t\t$this->closeDbConnection();\r\n\t\t\treturn $id;\r\n\t\t} catch (PDOException $e) {\r\n\t\t\techo \"Attenzione errore: \" . $e->getMessage();\r\n\t\t\t$this->database->rollBack();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**Metodo chr permette il salvataggio du un media di un oggetto passato come parametro alla funzione\r\n\t * @param $class, classe di cui si vuole salvare il media\r\n\t * @param obj oggetto interessato\r\n\t * @nome_file, nome del media da salvare\r\n\t */\r\n\tpublic function storeMedia ($class , $obj, $nome_file) {\r\n\t\ttry {\r\n\t\t\t$this->database->beginTransaction();\r\n\t\t\t$query = \"INSERT INTO \".$class::getTable().\" VALUES \".$class::getValues().\";\";\r\n\t\t\t$stmt = $this->database->prepare($query);\r\n\t\t\t$class::bind($stmt,$obj,$nome_file);\r\n\t\t\t$stmt->execute();\r\n\t\t\t$id=$this->database->lastInsertId();\r\n\t\t\t$this->database->commit();\r\n\t\t\t$this->closeDbConnection();\r\n\t\t\treturn $id;\r\n\t\t}\r\n\t\tcatch(PDOException $e) {\r\n\t\t\techo \"Attenzione errore: \".$e->getMessage();\r\n\t\t\t$this->db->rollBack();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Metodo che permette di aggiornare il valore di un attributo nel DB passato come parametro\r\n\t * @param string $class\r\n\t * @param string $attributo\r\n\t * @param string $newvalue\r\n\t * @param string $attributo_pk\r\n\t * @param string $value_pk\r\n\t * @return bool\r\n\t */\r\n\tpublic function update(string $class, string $attributo, string $newvalue, string $attributo_pk, string $value_pk){\r\n\t\ttry {\r\n\t\t\t$this->database->beginTransaction();\r\n\t\t\t$query = \"UPDATE \" . $class::getTable() . \" SET \" . $attributo . \"='\" . $newvalue . \"' WHERE \" . $attributo_pk . \"='\" . $value_pk . \"';\";\r\n\t\t\t$stmt = $this->database->prepare($query); //Prepared Statement\r\n\t\t\t$stmt->execute();\r\n\t\t\t$this->database->commit();\r\n\t\t\t$this->closeDbConnection();\r\n\t\t\treturn true;\r\n\t\t} catch (PDOException $e) {\r\n\t\t\techo \"Attenzione errore: \" . $e->getMessage();\r\n\t\t\t$this->database->rollBack();\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Metodo che ritorna tutti gli attributi di un'istanza dando come parametro di ricerca il valore di un attributopassato come parametro\r\n\t * @param class ,nome della classe\r\n\t * @field campo della classe\r\n\t * @id ,id della classe\r\n\t */\r\n\tpublic function exist($class, $attributo, $valore){\r\n\t\ttry {\r\n\t\t\t$query = \"SELECT * FROM \" . $class::getTable() . \" WHERE \" . $attributo . \"='\" . $valore . \"'\";\r\n\t\t\t$stmt = $this->database->prepare($query); //Prepared Statement\r\n\t\t\t$stmt->execute();\r\n\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\r\n\t\t\tif (count($result) >= 1)\r\n\t\t\t\treturn true;\r\n\t\t\telse\r\n\t\t\t\treturn false;\r\n\t\t\t$this->closeDbConnection();\r\n\t\t} catch (PDOException $e) {\r\n\t\t\techo \"Attenzione errore: \" . $e->getMessage();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Funzione che viene utilizzata per far vedere ad un utente loggato gli eventi dei localli che segue\r\n\t * @param $field campo della tabella  da confrontare\r\n\t * @param $id valore da confrontare\r\n\t * @param $idU idutente-username\r\n\t */\r\n\tpublic function loadEventiUtente($class,$id,$idU): ?array\r\n\t{\r\n\t\ttry {\r\n\t\t\t$query = \"SELECT * FROM \" . $class::getTable() . \" INNER JOIN Locali_Eventi ON Locali_Eventi.ID_Evento=\" . $id . \" INNER JOIN Utenti_Locali ON Utenti_Locali.ID_Locale=Locali_Eventi.ID_Locale WHERE Utenti_Locali.ID_Utente =\" . $idU . \";\";\r\n\t\t\t$stmt = $this->db->prepare($query); //Prepared Statement\r\n\t\t\t$stmt->execute();\r\n\t\t\t$num = $stmt->rowCount();\r\n\t\t\tif ($num == 0) {\r\n\t\t\t\t$result = null;        //nessuna riga interessata. return null\r\n\t\t\t} elseif ($num == 1) {                          //nel caso in cui una sola riga fosse interessata\r\n\t\t\t\t$result = $stmt->fetch(PDO::FETCH_ASSOC);   //ritorna una sola riga\r\n\t\t\t} else {\r\n\t\t\t\t$result = array();                         //nel caso in cui piu' righe fossero interessate\r\n\t\t\t\t$stmt->setFetchMode(PDO::FETCH_ASSOC);   //imposta la modalità di fetch come array associativo\r\n\t\t\t\twhile ($row = $stmt->fetch())\r\n\t\t\t\t\t$result[] = $row;                    //ritorna un array di righe.\r\n\t\t\t}\r\n\t\t\treturn $result;\r\n\t\t} catch (PDOException $e) {\r\n\t\t\techo \"Attenzione errore: \" . $e->getMessage();\r\n\t\t\t$this->db->rollBack();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Metodo che va ad inserire le chiavi esterne in tabelle originate da una relazione molti-a-molti\r\n\t * @param string $table Nome della tabella\r\n\t * @param string $field1 Nome della prima chiave\r\n\t * @param string $field2 Nome della seconda chiave\r\n\t * @param string $fk1 Foreign key della prima classe\r\n\t * @param string $fk2 Foreign key della seconda classe\r\n\t */\r\n\tpublic function chiaviEsterne(string $table, string $field1, string $field2, string $fk1, string $fk2){\r\n\t\ttry {\r\n\t\t\t$this->database->beginTransaction();\r\n\t\t\t$query = \"INSERT INTO \" . $table . \" (\" . $field1 . \",\" . $field2 . \") VALUES (\" . $fk1 . \",\" . $fk2 . \");\";\r\n\t\t\t$stmt = $this->database->prepare($query); //Prepared Statement\r\n\t\t\t$stmt->execute();\r\n\t\t\t$this->database->commit();\r\n\t\t\t$this->closeDbConnection();\r\n\t\t} catch (PDOException $e) {\r\n\t\t\techo \"Attenzione errore: \" . $e->getMessage();\r\n\t\t\t$this->database->rollBack();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n    public function loadAll($class){\r\n\t\ttry {\r\n\t\t\t$query = \"SELECT * FROM \" . $class::getTable() . \";\";\r\n\t\t\t$stmt = $this->db->prepare($query); //Prepared Statement\r\n\t\t\t$stmt->execute();\r\n\t\t\t$num = $stmt->rowCount();\r\n\t\t\tif ($num == 0) {\r\n\t\t\t\t$result = null;        //nessuna riga interessata. return null\r\n\t\t\t} elseif ($num == 1) {                          //nel caso in cui una sola riga fosse interessata\r\n\t\t\t\t$result = $stmt->fetch(PDO::FETCH_ASSOC);   //ritorna una sola riga\r\n\t\t\t} else {\r\n\t\t\t\t$result = array();                         //nel caso in cui piu' righe fossero interessate\r\n\t\t\t\t$stmt->setFetchMode(PDO::FETCH_ASSOC);   //imposta la modalità di fetch come array associativo\r\n\t\t\t\twhile ($row = $stmt->fetch())\r\n\t\t\t\t\t$result[] = $row;                    //ritorna un array di righe.\r\n\t\t\t}\r\n\t\t\treturn $result;\r\n\t\t} catch (PDOException $e) {\r\n\t\t\techo \"Attenzione errore: \" . $e->getMessage();\r\n\t\t\t$this->db->rollBack();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Funzione che viene utilizzata per la load quando ci si aspetta che la query produca un solo risultato (esempio load per id).\r\n\t * @param $field campo della tabella  da confrontare\r\n\t * @param $id valore da confrontare\r\n\t * @param $query query da eseguire\r\n\t */\r\n\tpublic function load($class, $field, $id){\r\n\t\ttry {\r\n\t\t\t$query = \"SELECT * FROM \" . $class::getTable() . \" WHERE \" . $field . \"='\" . $id . \"';\";\r\n\t\t\t$stmt = $this->db->prepare($query); //Prepared Statement\r\n\t\t\t$stmt->execute();\r\n\t\t\t$num = $stmt->rowCount();\r\n\t\t\tif ($num == 0) {\r\n\t\t\t\t$result = null;        //nessuna riga interessata. return null\r\n\t\t\t} elseif ($num == 1) {                          //nel caso in cui una sola riga fosse interessata\r\n\t\t\t\t$result = $stmt->fetch(PDO::FETCH_ASSOC);   //ritorna una sola riga\r\n\t\t\t} else {\r\n\t\t\t\t$result = array();                         //nel caso in cui piu' righe fossero interessate\r\n\t\t\t\t$stmt->setFetchMode(PDO::FETCH_ASSOC);   //imposta la modalità di fetch come array associativo\r\n\t\t\t\twhile ($row = $stmt->fetch())\r\n\t\t\t\t\t$result[] = $row;                    //ritorna un array di righe.\r\n\t\t\t}\r\n\t\t\treturn $result;\r\n\t\t} catch (PDOException $e) {\r\n\t\t\techo \"Attenzione errore: \" . $e->getMessage();\r\n\t\t\t$this->db->rollBack();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * metodo che elimina un'istanza di una tabella dal DB\r\n\t * @param string $class\r\n\t * @param string $attributo\r\n\t * @param string $value\r\n\t * @return bool\r\n\t */\r\n\tpublic function delete(string $class, string $attributo, string $value){\r\n\t\ttry {\r\n\t\t\t$this->database->beginTransaction();\r\n\t\t\t$esiste = $this->exist($class, $attributo, $value);\r\n\t\t\tif ($esiste) {\r\n\t\t\t\t$query = \"DELETE FROM \" . $class::getTable() . \" WHERE \" . $attributo . \"='\" . $value . \"';\";\r\n\t\t\t\t$stmt = $this->database->prepare($query);\r\n\t\t\t\t$stmt->execute();\r\n\t\t\t\t$this->database->commit();\r\n\t\t\t\t$this->closeDbConnection();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t} catch (PDOException $e) {\r\n\t\t\techo \"Attenzione errore: \" . $e->getMessage();\r\n\t\t\t$this->db->rollBack();\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**  Metodo che verifica l'accesso di un utente , controllando che le credenziali (email e password) siano presenti nel db\r\n\t *@param email ,email del utente\r\n\t *@param pass, password dell utente\r\n\t */\r\n\tpublic function loadVerificaAccesso ($username, $pass)\r\n\t{\r\n\t\ttry {\r\n\t\t\t$query = null;\r\n\t\t\t$class = \"FUtente\";\r\n\t\t\t$query = \"SELECT * FROM \" . $class::getTable() . \" WHERE username ='\" . $username . \"' AND password ='\" . $pass . \"';\";\r\n\t\t\t$stmt = $this->db->prepare($query);\r\n\t\t\t$stmt->execute();\r\n\t\t\t$num = $stmt->rowCount();\r\n\t\t\tif ($num == 0) {\r\n\t\t\t\t$result = null;        //nessuna riga interessata. return null\r\n\t\t\t} else {                          //nel caso in cui una sola riga fosse interessata\r\n\t\t\t\t$result = $stmt->fetch(PDO::FETCH_ASSOC);   //ritorna una sola riga\r\n\t\t\t}\r\n\t\t\treturn $result;\r\n\t\t} catch (PDOException $e) {\r\n\t\t\techo \"Attenzione errore: \" . $e->getMessage();\r\n\t\t\t$this->db->rollBack();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tpublic function getRecensioniLocali()\r\n\t{\r\n\t\ttry {\r\n\t\t\t$query = \"SELECT * FROM recensione INNER JOIN locale ON (locale.nome=recensione.nomelocale AND locale.luogo=recensione.nomelocale)\";\r\n\t\t\t$stmt = $this->db->prepare($query); //Prepared Statement\r\n\t\t\t$stmt->execute();\r\n\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\r\n\t\t\tif (count($result) == 1) return $result[0];  //rimane solo l'array interno\r\n\t\t\telse if (count($result) > 1) return $result;  //resituisce array di array\r\n\t\t\t$this->closeDbConnection();\r\n\t\t} catch (PDOException $e) {\r\n\t\t\techo \"Attenzione errore: \" . $e->getMessage();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n/**   Metodo che restituisce i locali che rispettano alcuni parametri di ricerca ,passati come parametri alla funzione\r\n * @param nome nome del locale\r\n * @param citta  città dove è situato il locale\r\n * @param categorie categorie a cui appartiene il locale\r\n*/\r\n\tpublic function loadMultipleLocale($nome, $citta, $categorie)\r\n\t{\r\n\t\ttry {\r\n\t\t\t$query = null;\r\n\t\t\t$class = \"FLocale\";\r\n\t\t\t$param = array($categorie, $nome, $citta);\r\n\r\n\t\t\tif(isset($categorie)){\r\n\t\t\t  $nCategorie = sizeof($categorie);\r\n\t\t\t}\r\n\r\n\t\t\t//print_r ($param);\r\n\t\t\tfor ($i = 0; $i < count($param); $i++) {\r\n\t\t\t\tif ($param[$i] != null) {\r\n\t\t\t\t\tswitch ($i) {\r\n\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\tfor ($j = 0; $j < nCategorie; $j++){\r\n\t\t\t\t\t\t\t   if ($query == null)\r\n\t\t\t\t\t\t\t\t  $query = \"SELECT * FROM \" . $class::getTable() . \" INNER JOIN ON  Locale_Categorie  ON Locale_Categorie.ID_Categoria='\" .categorie[j] . \"'\";\r\n\t\t\t\t\t\t\t   else\r\n\t\t\t\t\t\t\t\t  $query = $query . \" INNER JOIN ON  Locale_Categorie  ON Locale_Categorie.ID_Categoria='\" .categorie[j] .\"'\";\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tif ($query == null)\r\n\t\t\t\t\t\t\t\t$query = \"SELECT * FROM \" . $class::getTable()  . \" WHERE nome ='\" . $nome . \"'\";\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t$query = $query . \" AND nome ='\" . $nome . \"'\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tif ($query == null)\r\n\t\t\t\t\t\t\t\t$query = \"SELECT * FROM \" . $class::getTable()  . \" WHERE localizzazione ='\" . $citta . \"'\";\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t$query = $query . \" AND localizzazione ='\" . $citta . \"'\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$query = $query . \";\";\r\n\t\t\t//print $query;\r\n\r\n\t\t\t$stmt = $this->db->prepare($query);\r\n\t\t\t$stmt->execute();\r\n\t\t\t$num = $stmt->rowCount();\r\n\t\t\tif ($num == 0) {\r\n\t\t\t\t$result = null;        //nessuna riga interessata. return null\r\n\t\t\t} elseif ($num == 1) {                          //nel caso in cui una sola riga fosse interessata\r\n\t\t\t\t$result = $stmt->fetch(PDO::FETCH_ASSOC);   //ritorna una sola riga\r\n\t\t\t} else {\r\n\t\t\t\t$result = array();                         //nel caso in cui piu' righe fossero interessate\r\n\t\t\t\t$stmt->setFetchMode(PDO::FETCH_ASSOC);   //imposta la modalità di fetch come array associativo\r\n\t\t\t\twhile ($row = $stmt->fetch())\r\n\t\t\t\t\t$result[] = $row;                    //ritorna un array di righe.\r\n\t\t\t}\r\n\t\t\t//  $this->closeDbConnection();\r\n\t\t\treturn array($result, $num);\r\n\r\n\t\t} catch (PDOException $e) {\r\n\t\t\techo \"Attenzione errore: \" . $e->getMessage();\r\n\t\t\t$this->db->rollBack();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**   Metodo che restituisce gli eventi che rispettano alcuni parametri di ricerca ,passati come parametri alla funzione\r\n\t * @param nomelocale nome del locale\r\n\t * @param nomeevento nome evento\r\n\t * @param citta  città dove è situato il locale\r\n\t * @param data data evento\r\n\t */\r\n\tpublic function loadMultipleEvento($nomelocale,$nomeevento, $citta, $data){\r\n\t\ttry{\r\n\t\t\t$query = null;\r\n\t\t\t$class = \"FEvento\";\r\n\t\t\t$param = array($nomelocale,$nomeevento, $citta, $data);\r\n\t\t\tfor ($i = 0; $i < count($param); $i++) {\r\n\t\t\t\tif ($param[$i] != null) {\r\n\t\t\t\t\tswitch ($i) {\r\n\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\tif ($query == null)\r\n\t\t\t\t\t\t\t\t$query = \"SELECT * FROM \" . $class::getTable()  . \" INNER JOIN Locale_Eventi ON Locale_Eventi.ID_Locale='\" . $nomelocale . \"'\";\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t$query = $query . \" INNER JOIN Locale_Eventi ON Locale_Eventi.ID_Locale='\" . $nomelocale . \"'\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tif ($query == null)\r\n\t\t\t\t\t\t\t\t$query = \"SELECT * FROM \" . $class::getTable()  . \" WHERE nome ='\" . $nomeevento . \"'\";\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t$query = $query . \" AND nome ='\" . $nomeevento . \"'\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tif ($query == null)\r\n\t\t\t\t\t\t\t\t$query = \"SELECT * FROM \" . $class::getTable()  . \" INNER JOIN Locale_Eventi ON Locale_Eventi.ID_Evento=\".$class::getTable().id.\" INNER JOIN Locale ON Locale.id=Locale_Eventi.ID_Locale WHERE localizzazione ='\" . $citta . \"'\";\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t$query = $query . \" INNER JOIN Locale_Eventi ON Locale_Eventi.ID_Evento=\".$class::getTable().id.\" INNER JOIN Locale ON Locale.id=Locale_Eventi.ID_Locale WHERE localizzazione ='\" . $citta . \"'\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\tif ($query == null)\r\n\t\t\t\t\t\t\t\t$query = \"SELECT * FROM \" . $class::getTable()  . \" WHERE data ='\" . $data. \"'\";\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t$query = $query . \" AND data ='\" . $data . \"'\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$query = $query . \";\";\r\n\t\t\t//print $query;\r\n\r\n\t\t\t$stmt = $this->db->prepare($query);\r\n\t\t\t$stmt->execute();\r\n\t\t\t$num = $stmt->rowCount();\r\n\t\t\tif ($num == 0) {\r\n\t\t\t\t$result = null;        //nessuna riga interessata. return null\r\n\t\t\t} elseif ($num == 1) {                          //nel caso in cui una sola riga fosse interessata\r\n\t\t\t\t$result = $stmt->fetch(PDO::FETCH_ASSOC);   //ritorna una sola riga\r\n\t\t\t} else {\r\n\t\t\t\t$result = array();                         //nel caso in cui piu' righe fossero interessate\r\n\t\t\t\t$stmt->setFetchMode(PDO::FETCH_ASSOC);   //imposta la modalità di fetch come array associativo\r\n\t\t\t\twhile ($row = $stmt->fetch())\r\n\t\t\t\t\t$result[] = $row;                    //ritorna un array di righe.\r\n\t\t\t}\r\n\t\t\t//  $this->closeDbConnection();\r\n\t\t\treturn array($result, $num);\r\n\r\n\t\t} catch (PDOException $e) {\r\n\t\t\techo \"Attenzione errore: \" . $e->getMessage();\r\n\t\t\t$this->db->rollBack();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/** Metodo che restituisce le categorie/eventi/orari/immagini che caratterizzano un determinato locale, individuato dal suo id\r\n\t * @param idlocale identificativo del locale\r\n\t * @return info del locale\r\n\t */\r\n\tpublic function loadInfoLocale($class,$field,$idlocale){\r\n\t\ttry{\r\n\t\t\t$query = (\"SELECT * FROM \" . $class::getTable() . \" INNER JOIN \".$field.\" ON \".$field.\".ID_Locale\". \"='\" . $idlocale . \"';\");\r\n\t\t\t$stmt = $this->db->prepare($query); //Prepared Statement\r\n\t\t\t$stmt->execute();\r\n\t\t\t$num = $stmt->rowCount();\r\n\t\t\tif ($num == 0) {\r\n\t\t\t\t$result = null;        //nessuna riga interessata. return null\r\n\t\t\t} elseif ($num == 1) {                          //nel caso in cui una sola riga fosse interessata\r\n\t\t\t\t$result = $stmt->fetch(PDO::FETCH_ASSOC);   //ritorna una sola riga\r\n\t\t\t} else {\r\n\t\t\t\t$result = array();                         //nel caso in cui piu' righe fossero interessate\r\n\t\t\t\t$stmt->setFetchMode(PDO::FETCH_ASSOC);   //imposta la modalità di fetch come array associativo\r\n\t\t\t\twhile ($row = $stmt->fetch())\r\n\t\t\t\t\t$result[] = $row;                    //ritorna un array di righe.\r\n\t\t\t}\r\n\r\n\t\t\treturn array($result, $num);\r\n\r\n\t\t} catch (PDOException $e) {\r\n\t\t\techo \"Attenzione errore: \" . $e->getMessage();\r\n\t\t\t$this->db->rollBack();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**  Metodo che chiude la connesione con il db */\r\n\tpublic function closeDbConnection (){\r\n\t\tstatic::$_instance = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Funzione utilizzata per ritornare tutte le recensioni presenti sul database\r\n\t * Utilizzata nella pagina admin\r\n\t * @param $query query da eseguire\r\n\t */\r\n\tpublic function getAllRev(){\r\n\t\ttry {\r\n\t\t\t$query = \"SELECT * FROM recensione;\";\r\n\t\t\t$stmt = $this->db->prepare($query);\r\n\t\t\t$stmt->execute();\r\n\t\t\t$num = $stmt->rowCount();\r\n\t\t\tif ($num == 0) {\r\n\t\t\t\t$result = null;\r\n\t\t\t} elseif ($num == 1) {\r\n\t\t\t\t$result = $stmt->fetch(PDO::FETCH_ASSOC);\r\n\t\t\t} else {\r\n\t\t\t\t$result = array();\r\n\t\t\t\t$stmt->setFetchMode(PDO::FETCH_ASSOC);\r\n\t\t\t\twhile ($row = $stmt->fetch())\r\n\t\t\t\t\t$result[] = $row;\r\n\t\t\t}\r\n\t\t\treturn array($result, $num);\r\n\t\t} catch (PDOException $e) {\r\n\t\t\techo \"Attenzione errore: \" . $e->getMessage();\r\n\t\t\t$this->db->rollBack();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Funzione utilizzata per ritornare tutti gli utenti che verificano determinate caratteristiche date in input\r\n\t * Utilizzata nella pagina admin\r\n\t * @param $campo colonna nel db sul quale viene fatto il controllo\r\n\t * @param $query query da eseguire*/\r\n\tpublic function CercaByKeyword($class,$campo,$input)\r\n\t{\r\n\t\t$query = \"SELECT * FROM \" . $class::getTable() . \" WHERE \" . $campo . \" LIKE '%\" . $input . \"%';\";\r\n\t\t$stmt = $this->db->prepare($query);\r\n\t\t$stmt->execute();\r\n\t\t$num = $stmt->rowCount();\r\n\t\tif ($num == 0)\r\n\t\t\t$result = null;\r\n\t\telseif ($num == 1)\r\n\t\t\t$result = $stmt->fetch(PDO::FETCH_ASSOC);\r\n\t\telse {\r\n\t\t\t$result = array();\r\n\t\t\t$stmt->setFetchMode(PDO::FETCH_ASSOC);\r\n\t\t\twhile ($row = $stmt->fetch())\r\n\t\t\t\t$result[] = $row;\r\n\t\t}\r\n\t\treturn array($result, $num);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Funzione utilizzata per ritornare tutti gli utenti che verificano determinate caratteristiche date in input\r\n\t * Utilizzata nella pagina admin\r\n\t * @param $state valore booleano in input che esprime la visibilità o meno di un annuncio\r\n\t * @param $query query da eseguire\r\n\t */\r\n\tpublic function utentiByString ($string)\r\n\t{\r\n\t\t$query = \"SELECT * FROM utente where  username = '\" . $string . \"';\";\r\n\r\n\t\t$stmt = $this->db->prepare($query);\r\n\t\t$stmt->execute();\r\n\t\t$num = $stmt->rowCount();\r\n\t\tif ($num == 0)\r\n\t\t\t$result = null;\r\n\t\telseif ($num == 1)\r\n\t\t\t$result = $stmt->fetch(PDO::FETCH_ASSOC);\r\n\t\telse {\r\n\t\t\t$result = array();\r\n\t\t\t$stmt->setFetchMode(PDO::FETCH_ASSOC);\r\n\t\t\twhile ($row = $stmt->fetch())\r\n\t\t\t\t$result[] = $row;\r\n\t\t}\r\n\t\treturn array($result, $num);\r\n\t}\r\n\r\n}\r\n\r\n?>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Foundation/FDB.php b/Foundation/FDB.php
--- a/Foundation/FDB.php	(revision e32de89669f6ae4d09e5fa06e407e27eb5c27221)
+++ b/Foundation/FDB.php	(date 1662621017256)
@@ -53,6 +53,7 @@
 			$this->database->beginTransaction();
 			$query = "INSERT INTO " . $class::getTable() . " VALUES " . $class::getValues();
 			$stmt = $this->database->prepare($query); //Prepared Statement
+			//var_dump($obj);
 			$class::bind($stmt,$obj);
 			$stmt->execute();
 			if($class == "FAdmin" || $class == "FProprietario" || $class == "FUtente")
Index: Foundation/FUtente.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nrequire_once 'utility/autoload.php';\r\n/**\r\n * La classe FUtente fornisce query per gli oggetti EUtente\r\n * @author Gruppo 8\r\n * @package Foundation\r\n */\r\nclass FUtente{\r\n\r\n    /** classe Foundation */\r\n    private static $class=\"FUtente\";\r\n\r\n\t/** tabella con la quale opera nel DB */\r\n    private static $table=\"Utente\";\r\n\r\n    /** valori della tabella nel DB */\r\n    private static  $values=\"(:username,:nome,:cognome,:email,:password,:dataIscrizione,:idImg,:state)\";\r\n\r\n    /** costruttore */\r\n    public function __construct(){\r\n\r\n    }\r\n\r\n    /**\r\n    * metodo che lega gli attributi dell'Utente da inserire con i parametri della INSERT\r\n    * @param PDOStatement $stmt\r\n    * @param EUtente $utente\r\n    */\r\n    public static function bind(PDOStatement $stmt, EUtente $utente){\r\n        $stmt->bindValue(':username', $utente->getUsername(), PDO::PARAM_STR);\r\n\t\t$stmt->bindValue(':nome',$utente->getNome(), PDO::PARAM_STR);\r\n\t\t$stmt->bindValue(':cognome',$utente->getCognome(), PDO::PARAM_STR);\r\n        $stmt->bindValue(':email', $utente->getEmail(), PDO::PARAM_STR);\r\n        $stmt->bindValue(':password', $utente->getPassword(), PDO::PARAM_STR);\r\n        $stmt->bindValue(':idImg', NULL, PDO::PARAM_INT);\r\n        $stmt->bindValue(':dataIscrizione', $utente->getIscrizione());\r\n        $stmt->bindValue(':state', $utente->getState(), PDO::PARAM_BOOL);\r\n    }\r\n\r\n    /**\r\n    * metodo che restituisce il nome della classe per la costruzione delle query\r\n    * @return string $class Nome della classe\r\n    */\r\n    public static function getClass(){\r\n        return self::$class;\r\n    }\r\n\r\n    /**\r\n    * metodo che restituisce il nome della tabella per la costruzione delle query\r\n    * @return string $table Nome della tabella\r\n    */\r\n    public static function getTable(){\r\n        return self::$table;\r\n    }\r\n\r\n    /**\r\n    * metodo che restituisce l'insieme dei valori per la costruzione delle query\r\n    * @return string $values Nomi delle colonne della tabella\r\n    */\r\n    public static function getValues(){\r\n        return self::$values;\r\n    }\r\n\r\n    /**\r\n     * metodo che permette il salvataggio una Utente nel db\r\n     * @param EUtente $utente Utente da salvare\r\n     * @return string\r\n     */\r\n    public static function store(EUtente $utente){\r\n        $db = FDB::getInstance();\r\n        $id = $db->store(static::getClass() ,$utente);\r\n        //Utenti Locali\r\n        if($utente->getLocalipreferiti()!=null){\r\n            foreach($utente->getLocalipreferiti() as $pref){\r\n                $idLoc = $pref->getId();\r\n                $db->chiaviEsterne(\"Utenti_Locali\",\"ID_Locale\",\"ID_Utente\",$id,$idLoc);\r\n            }\r\n        }\r\n        return $id;\r\n    }\r\n\r\n\r\n    /**\r\n    * Permette la load sul database\r\n    * @param $id campo da confrontare per trovare l'oggetto\r\n    * @return object $utente Utente\r\n    */\r\n    public static function loadByField($field, $id){\r\n        $utente = null;\r\n        $db=FDB::getInstance();\r\n        $result=$db->load(static::getClass(), $field, $id);\r\n        $rows_number = $db->interestedRows(static::getClass(), $field, $id);    //funzione richiamata,presente in FDB --> restituisce numero di righe interessate dalla query\r\n        if(($result!=null) && ($rows_number == 1)) {\r\n            $utente=new EUtente($result['username'],$result['nome'],$result['cognome'], $result['email'], $result['password'],$result['dataIscrizione']); //Carica un Utente dal database\r\n        }\r\n        else {\r\n            if(($result!=null) && ($rows_number > 1)){\r\n                $utente = array();\r\n        \t    for($i=0; $i<count($result); $i++){\r\n                    $utente[]=new EUtente($result[$i]['username'],$result[$i]['nome'],$result[$i]['cognome'], $result[$i]['email'], $result[$i]['password'],$result[$i]['dataIscrizione']); //Carica un array di oggetti Utente dal database\r\n                }\r\n            }\r\n        }\r\n        return $utente;\r\n    }\r\n\r\n    /**\r\n     * metodo che verifica l'esistenza di un Utente nel DB considerato un attributo\r\n     * @param string $attributo\r\n     * @param string $valore\r\n     * @return bool\r\n     */\r\n    public static function exist(string $attributo,string $valore) {\r\n        $db = FDB::getInstance();\r\n        $result = $db->exist(static::getClass(), $attributo, $valore);\r\n        if($result!=null)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    /**\r\n     * metodo che aggiorna il valore di un attributo dell'Utente sul DB data la chiave primaria\r\n     * @param string $attributo\r\n     * @param string $newvalue\r\n     * @param string $attributo_pk\r\n     * @param string $value_pk\r\n     * @return bool\r\n     */\r\n    public static function update(string $attributo, string $newvalue, string $attributo_pk, string $value_pk){\r\n        $db=FDB::getInstance();\r\n        $result = $db->update(static::getClass(), $attributo, $newvalue, $attributo_pk, $value_pk);\r\n        if($result)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    /**\r\n     * @param string $attributo\r\n     * @param string $valore\r\n     * @return bool\r\n     */\r\n    public static function delete(string $attributo, string $valore){\r\n        $db=FDB::getInstance();\r\n        $result = $db->delete(static::getClass(), $attributo, $valore);\r\n        if($result)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\t\r\n    /**  Metodo che permette il caricamento del login di un utente,passati la sua email e la sua password\r\n    * @param user mail dell utente\r\n    * @param pass password ell utente\r\n    */\r\n\tpublic static function loadLogin ($user, $pass) {\r\n\t\t$utente = null;\r\n\t\t$db=FDB::getInstance();\r\n\t\t$result=$db->loadVerificaAccesso($user, $pass);\r\n\t\tif (isset($result)){\r\n\t\t\t$ute = FUtente::loadByField(\"username\" , $result[\"username\"]);\r\n\t\t\t$pro = FProprietario::loadByField(\"username\" , $result[\"username\"]);\r\n\t\t\t$admin = static::loadByField(\"username\", $result[\"username\"]);\r\n\t\t\tif ($ute)\r\n\t\t\t\t$utente = $ute;\r\n\t\t\telseif ($pro)\r\n\t\t\t\t$utente = $pro;\r\n\t\t\telseif ($admin)\r\n                $utente = $admin;\r\n\t\t}\r\n\t\treturn $utente;\r\n\t}\r\n\r\n\r\n    /**\r\n     * Metodo che permette di ritornare tutti gli utenti presenti sul db, in base al loro stato.\r\n     * @param $state valore dello stato\r\n     * @return object $utente Utente\r\n     \r\n\t PROBABILMENTE NEL NOSTRO CASO INUTILE\r\n\t \r\n    public static function loadUtenti($state){\r\n        $utente = null;\r\n        $db=FDatabase::getInstance();\r\n        list ($result, $rows_number)=$db->getUtenti($state);\r\n        if(($result!=null) && ($rows_number == 1)) {\r\n            $utente=new EUtente($result['username'],$result['nome'],$result['cognome'], $result['email'], $result['password'],$result['dataIscrizione']);\r\n        }\r\n        else {\r\n            if(($result!=null) && ($rows_number > 1)){\r\n                $utente = array();\r\n                for($i=0; $i<count($result); $i++){\r\n                    $utente[]=new EUtente($result[$i]['username'],$result[$i]['nome'],$result[$i]['cognome'], $result[$i]['email'], $result[$i]['password'],$result[$i]['dataIscrizione']);\r\n                }\r\n            }\r\n        }\r\n        return $utente;\r\n    } */\r\n\r\n\r\n    /**\r\n     *Metodo che  permette di ritornare gli utenti del db, filtrandoli per nome, cognome\r\n     * @param $string valore inserito nella barra di ricerca dell'admin\r\n     * @return object $utente Utente\r\n     */\r\n    public static function loadUtentiByString($string){\r\n        $utente = null;\r\n        $toSearch = null;\r\n        $db=FDB::getInstance();\r\n        list ($result, $rows_number)=$db->utentiByString($string);\r\n        if(($result!=null) && ($rows_number == 1)) {\r\n            $utente=new EUtente($result['password'],$result['nome'],$result['cognome'],$result['username'],$result['state']);\r\n        }\r\n        else {\r\n            if(($result!=null) && ($rows_number > 1)){\r\n                $utente = array();\r\n                for($i=0; $i<count($result); $i++){\r\n                    $utente[]=new EUtente($result[$i]['password'],$result[$i]['nome'],$result[$i]['cognome'],$result[$i]['username'],$result[$i]['state']);\r\n                }\r\n            }\r\n        }\r\n        return $utente;\r\n    }\r\n    \r\n\r\n}\r\n\r\n?>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Foundation/FUtente.php b/Foundation/FUtente.php
--- a/Foundation/FUtente.php	(revision e32de89669f6ae4d09e5fa06e407e27eb5c27221)
+++ b/Foundation/FUtente.php	(date 1662621017272)
@@ -27,7 +27,8 @@
     * @param PDOStatement $stmt
     * @param EUtente $utente
     */
-    public static function bind(PDOStatement $stmt, EUtente $utente){
+    public static function bind($stmt, EUtente $utente){
+        //var_dump($utente);
         $stmt->bindValue(':username', $utente->getUsername(), PDO::PARAM_STR);
 		$stmt->bindValue(':nome',$utente->getNome(), PDO::PARAM_STR);
 		$stmt->bindValue(':cognome',$utente->getCognome(), PDO::PARAM_STR);
@@ -36,6 +37,7 @@
         $stmt->bindValue(':idImg', NULL, PDO::PARAM_INT);
         $stmt->bindValue(':dataIscrizione', $utente->getIscrizione());
         $stmt->bindValue(':state', $utente->getState(), PDO::PARAM_BOOL);
+
     }
 
     /**
Index: index.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nrequire_once 'utility/autoload.php';\r\nrequire_once 'StartSmarty.php';\r\n\r\n\r\nprint FEvento::delete(\"id\",\"1\");\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/index.php b/index.php
--- a/index.php	(revision e32de89669f6ae4d09e5fa06e407e27eb5c27221)
+++ b/index.php	(date 1662621023188)
@@ -3,5 +3,8 @@
 require_once 'utility/autoload.php';
 require_once 'StartSmarty.php';
 
+$utente = new EUtente("123","utente1","ut1","USER1","utente1@mail.it");
 
-print FEvento::delete("id","1");
+$id = FUtente::store($utente);
+
+print $id;
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"c26a7dfa-0602-4989-a1a2-5d0dff0684f8\" name=\"Changes\" comment=\"login e registrazione aggiunta logo in alto da completare\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/dataSources/d9830d30-2235-4e14-8461-b97cff5bbe0a/storage_v2/_src_/schema/mysql.osA4Bg.meta\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/dataSources/d9830d30-2235-4e14-8461-b97cff5bbe0a/storage_v2/_src_/schema/mysql.osA4Bg.zip\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Entity/EEvento.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Entity/EEvento.php\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/FacceBeve.sql\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/FacceBeve.sql\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Foundation/FAdmin.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Foundation/FAdmin.php\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Foundation/FCategoria.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Foundation/FCategoria.php\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Foundation/FDB.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Foundation/FDB.php\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Foundation/FEvento.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Foundation/FEvento.php\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Foundation/FLocale.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Foundation/FLocale.php\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Foundation/FLocalizzazione.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Foundation/FLocalizzazione.php\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Foundation/FOrario.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Foundation/FOrario.php\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Foundation/FProprietario.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Foundation/FProprietario.php\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Foundation/FRecensione.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Foundation/FRecensione.php\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Foundation/FRisposta.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Foundation/FRisposta.php\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Foundation/FUtente.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Foundation/FUtente.php\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/index.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/index.php\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ComposerSettings\">\r\n    <execution />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"HTML File\" />\r\n        <option value=\"CSS File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"PhpWorkspaceProjectConfiguration\" interpreter_name=\"PHP\" />\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"28QdjzE58SNYiWrkjmlxumi1Kuc\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"ASKED_ADD_EXTERNAL_FILES\": \"true\",\r\n    \"DefaultHtmlFileTemplate\": \"HTML File\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"list.type.of.created.stylesheet\": \"CSS\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"php.override.implement.member.chooser.php.doc\": \"NONE\",\r\n    \"settings.editor.selected.configurable\": \"reference.webide.settings.project.settings.php.debug\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  },\r\n  \"keyToStringList\": {\r\n    \"DatabaseDriversLRU\": [\r\n      \"mysql\"\r\n    ],\r\n    \"RunConfigurationTargetLRU\": [\r\n      \"063e7489-89be-42e4-bbe3-a5ecc915e49f\"\r\n    ]\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\matte\\Documents\\GitHub\\FacceBeve\\template\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"PHP Script.index.php\">\r\n    <configuration name=\"FacceBeve.sql\" type=\"DatabaseScript\" editBeforeRun=\"true\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <script-file value=\"$PROJECT_DIR$/FacceBeve.sql\" />\r\n      <script-mode>FILE</script-mode>\r\n      <data-source id=\"063e7489-89be-42e4-bbe3-a5ecc915e49f\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"dashboardAdmin.html\" type=\"JavascriptDebugType\" temporary=\"true\" nameIsGenerated=\"true\" uri=\"http://localhost:63342/FacceBeve/Smarty/html/dashboardAdmin.html\" useBuiltInWebServerPort=\"true\">\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"registrazioneEvento.html\" type=\"JavascriptDebugType\" temporary=\"true\" nameIsGenerated=\"true\" uri=\"http://localhost:63342/FacceBeve/Smarty/html/registrazioneEvento.html\" useBuiltInWebServerPort=\"true\">\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"registrazioneLocale.html\" type=\"JavascriptDebugType\" temporary=\"true\" nameIsGenerated=\"true\" uri=\"http://localhost:63342/FacceBeve/Smarty/html/registrazioneLocale.html\" useBuiltInWebServerPort=\"true\">\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"index.php\" type=\"PhpLocalRunConfigurationType\" factoryName=\"PHP Console\" temporary=\"true\" path=\"$PROJECT_DIR$/index.php\">\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"PHP Script.index.php\" />\r\n        <item itemvalue=\"Database Script.FacceBeve.sql\" />\r\n        <item itemvalue=\"JavaScript Debug.dashboardAdmin.html\" />\r\n        <item itemvalue=\"JavaScript Debug.registrazioneLocale.html\" />\r\n        <item itemvalue=\"JavaScript Debug.registrazioneEvento.html\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"c26a7dfa-0602-4989-a1a2-5d0dff0684f8\" name=\"Changes\" comment=\"\" />\r\n      <created>1651152882261</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1651152882261</updated>\r\n      <workItem from=\"1651152883719\" duration=\"20000\" />\r\n      <workItem from=\"1651155143324\" duration=\"577000\" />\r\n      <workItem from=\"1652772306403\" duration=\"3183000\" />\r\n      <workItem from=\"1652781708332\" duration=\"6000\" />\r\n      <workItem from=\"1652791741132\" duration=\"6951000\" />\r\n      <workItem from=\"1653560223238\" duration=\"666000\" />\r\n      <workItem from=\"1653560911120\" duration=\"22000\" />\r\n      <workItem from=\"1656663740176\" duration=\"451000\" />\r\n      <workItem from=\"1659425909103\" duration=\"140000\" />\r\n      <workItem from=\"1659426067911\" duration=\"4642000\" />\r\n      <workItem from=\"1659512073811\" duration=\"2427000\" />\r\n      <workItem from=\"1659964799502\" duration=\"4463000\" />\r\n      <workItem from=\"1660212137365\" duration=\"3129000\" />\r\n      <workItem from=\"1660290237057\" duration=\"7353000\" />\r\n      <workItem from=\"1660315334888\" duration=\"6979000\" />\r\n      <workItem from=\"1660720024137\" duration=\"1296000\" />\r\n      <workItem from=\"1660844876318\" duration=\"2389000\" />\r\n      <workItem from=\"1660896177487\" duration=\"2951000\" />\r\n      <workItem from=\"1661020640784\" duration=\"1005000\" />\r\n      <workItem from=\"1661584348820\" duration=\"6662000\" />\r\n      <workItem from=\"1661953620532\" duration=\"2555000\" />\r\n      <workItem from=\"1662460733829\" duration=\"5099000\" />\r\n      <workItem from=\"1662575406275\" duration=\"797000\" />\r\n      <workItem from=\"1662618357874\" duration=\"2575000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"get e set di qualcosa\" />\r\n    <MESSAGE value=\"login e registrazione aggiunta logo in alto da completare\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"login e registrazione aggiunta logo in alto da completare\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e32de89669f6ae4d09e5fa06e407e27eb5c27221)
+++ b/.idea/workspace.xml	(date 1662621218839)
@@ -4,22 +4,9 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="c26a7dfa-0602-4989-a1a2-5d0dff0684f8" name="Changes" comment="login e registrazione aggiunta logo in alto da completare">
-      <change beforePath="$PROJECT_DIR$/.idea/dataSources/d9830d30-2235-4e14-8461-b97cff5bbe0a/storage_v2/_src_/schema/mysql.osA4Bg.meta" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/dataSources/d9830d30-2235-4e14-8461-b97cff5bbe0a/storage_v2/_src_/schema/mysql.osA4Bg.zip" beforeDir="false" />
+    <list default="true" id="610c6203-30f3-490b-afa7-719606c23e94" name="Changes" comment="Sistemazione dashboardAdmin">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Entity/EEvento.php" beforeDir="false" afterPath="$PROJECT_DIR$/Entity/EEvento.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/FacceBeve.sql" beforeDir="false" afterPath="$PROJECT_DIR$/FacceBeve.sql" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Foundation/FAdmin.php" beforeDir="false" afterPath="$PROJECT_DIR$/Foundation/FAdmin.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Foundation/FCategoria.php" beforeDir="false" afterPath="$PROJECT_DIR$/Foundation/FCategoria.php" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Foundation/FDB.php" beforeDir="false" afterPath="$PROJECT_DIR$/Foundation/FDB.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Foundation/FEvento.php" beforeDir="false" afterPath="$PROJECT_DIR$/Foundation/FEvento.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Foundation/FLocale.php" beforeDir="false" afterPath="$PROJECT_DIR$/Foundation/FLocale.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Foundation/FLocalizzazione.php" beforeDir="false" afterPath="$PROJECT_DIR$/Foundation/FLocalizzazione.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Foundation/FOrario.php" beforeDir="false" afterPath="$PROJECT_DIR$/Foundation/FOrario.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Foundation/FProprietario.php" beforeDir="false" afterPath="$PROJECT_DIR$/Foundation/FProprietario.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Foundation/FRecensione.php" beforeDir="false" afterPath="$PROJECT_DIR$/Foundation/FRecensione.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Foundation/FRisposta.php" beforeDir="false" afterPath="$PROJECT_DIR$/Foundation/FRisposta.php" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Foundation/FUtente.php" beforeDir="false" afterPath="$PROJECT_DIR$/Foundation/FUtente.php" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/index.php" beforeDir="false" afterPath="$PROJECT_DIR$/index.php" afterDir="false" />
     </list>
@@ -45,7 +32,7 @@
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
   </component>
-  <component name="PhpWorkspaceProjectConfiguration" interpreter_name="PHP" />
+  <component name="PhpWorkspaceProjectConfiguration" interpreter_name="PHPxampp" />
   <component name="ProblemsViewState">
     <option name="selectedTabId" value="CurrentFile" />
   </component>
@@ -70,15 +57,12 @@
     "node.js.selected.package.tslint": "(autodetect)",
     "nodejs_package_manager_path": "npm",
     "php.override.implement.member.chooser.php.doc": "NONE",
-    "settings.editor.selected.configurable": "reference.webide.settings.project.settings.php.debug",
+    "settings.editor.selected.configurable": "reference.webide.settings.project.settings.php",
     "vue.rearranger.settings.migration": "true"
   },
   "keyToStringList": {
     "DatabaseDriversLRU": [
       "mysql"
-    ],
-    "RunConfigurationTargetLRU": [
-      "063e7489-89be-42e4-bbe3-a5ecc915e49f"
     ]
   }
 }]]></component>
@@ -88,10 +72,7 @@
     </key>
   </component>
   <component name="RunManager" selected="PHP Script.index.php">
-    <configuration name="FacceBeve.sql" type="DatabaseScript" editBeforeRun="true" temporary="true" nameIsGenerated="true">
-      <script-file value="$PROJECT_DIR$/FacceBeve.sql" />
-      <script-mode>FILE</script-mode>
-      <data-source id="063e7489-89be-42e4-bbe3-a5ecc915e49f" />
+    <configuration name="Login.html" type="JavascriptDebugType" temporary="true" nameIsGenerated="true" uri="http://localhost:63342/FacceBeve/Smarty/html/Login.html" useBuiltInWebServerPort="true">
       <method v="2" />
     </configuration>
     <configuration name="dashboardAdmin.html" type="JavascriptDebugType" temporary="true" nameIsGenerated="true" uri="http://localhost:63342/FacceBeve/Smarty/html/dashboardAdmin.html" useBuiltInWebServerPort="true">
@@ -109,17 +90,17 @@
     <recent_temporary>
       <list>
         <item itemvalue="PHP Script.index.php" />
-        <item itemvalue="Database Script.FacceBeve.sql" />
         <item itemvalue="JavaScript Debug.dashboardAdmin.html" />
         <item itemvalue="JavaScript Debug.registrazioneLocale.html" />
         <item itemvalue="JavaScript Debug.registrazioneEvento.html" />
+        <item itemvalue="JavaScript Debug.Login.html" />
       </list>
     </recent_temporary>
   </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
-      <changelist id="c26a7dfa-0602-4989-a1a2-5d0dff0684f8" name="Changes" comment="" />
+      <changelist id="610c6203-30f3-490b-afa7-719606c23e94" name="Changes" comment="login e registrazione aggiunta logo in alto da completare" />
       <created>1651152882261</created>
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
@@ -146,8 +127,7 @@
       <workItem from="1661584348820" duration="6662000" />
       <workItem from="1661953620532" duration="2555000" />
       <workItem from="1662460733829" duration="5099000" />
-      <workItem from="1662575406275" duration="797000" />
-      <workItem from="1662618357874" duration="2575000" />
+      <workItem from="1662569239096" duration="2504000" />
     </task>
     <servers />
   </component>
@@ -171,4 +151,8 @@
     <MESSAGE value="login e registrazione aggiunta logo in alto da completare" />
     <option name="LAST_COMMIT_MESSAGE" value="login e registrazione aggiunta logo in alto da completare" />
   </component>
+  <component name="XSLT-Support.FileAssociations.UIState">
+    <expand />
+    <select />
+  </component>
 </project>
\ No newline at end of file
